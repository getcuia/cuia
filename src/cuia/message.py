"""Both terminal events and custom ones as message passing."""


from __future__ import annotations

from abc import ABC
from dataclasses import dataclass
from typing import Text


@dataclass
class Message(ABC):
    """
    Simple message base class.

    Subclass this to create custom messages. There are no requirements for
    custom messages, but subclassing ensures that messages can be identified
    by the runtime and handled correctly.
    """


@dataclass
class Quit(Message):
    """A message informing the application to quit."""


@dataclass
class Key(Message):
    """A message generated by a keyboard event."""

    key: Text
    """The key pressed."""

    def __init__(self, key: Text):
        """Initialize a keyboard message."""
        super().__init__()
        self.key = key

    def __repr__(self) -> Text:
        """Return a string representation of the keyboard message."""
        return f"KeyMessage({repr(self.key)})"

    def __str__(self) -> Text:
        """Return a friendly representation of the keyboard message."""
        return self.key
